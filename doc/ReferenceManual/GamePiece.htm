<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Game Piece</title>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body>
<table border="0" cellpadding="2" cellspacing="2" width="100%">
  <tbody>
  <tr align="center">
  <td valign="top">
  <h1>VASSAL Reference Manual</h1>
  <small><a href="index.htm">Home</a> &gt; <a href="GameModule.htm">Module</a>
  &gt; <a href="PieceWindow.htm">Game Piece Palette</a></small> <small>&gt;<b>
  Game Piece</b></small><br>
  </td>
  </tr>
  <tr>
  <table border="0" cellpadding="2" cellspacing="2" width="100%">
    <tbody>
    <tr>
    <hr size="2" width="100%">
    <h2>Game Piece</h2>
    </tr>
    <tr>
    <td valign="top">
    A Game Piece, sometimes simply referred to as a piece, is any counter, marker, or card used in a game. Game Pieces
    in VASSAL are highly customizable and can have quite complex behavior. They are defined by adding <i>
    Traits</i> to a basic piece in the Piece Definer window shown at right. A list of available Traits appears to the
    left, and a list of Traits currently in use by the piece you're defining appears at the right. Add a Trait by
    selecting it in the list of available traits and clicking the 'Add' button. Remove a Trait by selecting it and
    clicking the 'Remove' button.<br>
    <br>
    As you define your Piece, it will appear at the top of the window. You can select the Piece and type commands for it
    or right-click to bring up its context menu to test it as you go.<br>
    <br>
    Once added to your Piece, a Trait's properties can be edited by selecting the Trait and clicking the Properties
    button, or by double-clicking on the Trait in the list.<br>
    <br>
    When a Piece is drawn, the Traits are drawn <i>in order</i>, beginning with the Basic Piece and continuing downward.
    The order of Traits can be important. For example the image in a Layer trait may obscure the Basic Piece or other
    Layers before it in the list of Traits.<br>
    <br>
    For highly specialized pieces, you may supply your own custom Java classes. The Java class must implement the
    GamePiece interface and most commonly extends the Decorator class. First, add the Java .class file to the module
    file using a Zip utility (remember to preserve the package structure: e.g. the class should go in a subdirectory
    within the Zip that is named for its package). Then hit the "Import" button and enter the fully-qualified name of
    the class (if the package name is "PathsOfGlory" and the class name is "CustomPieceMover" then enter
    "PathsOfGlory.CustomPieceMover"). The Trait corresponding to your class will appear in the list of available Traits
    and you may add it normally. See the Coding Tutorial for more details.<br>
    </td>
    <td valign="top">
    <div align="center">
      <img src="images/GamePiece.png" alt=""><br>
    </div>
    <br>
    </td>
    </tr>
    </tbody>
  </table>

  <table border="0" cellpadding="2" cellspacing="2" width="100%">
    <tbody>
    <tr>
    <hr size="2" width="100%">
    <h2>Trait Ordering and YOU</h2>
    <td valign="top">
    Although you can probably make it a reasonable way into designing your first VASSAL module by just loading traits
    into a piece in whatever order they occur to you, <i>eventually</i> as your mastery grows and you begin to think of
    more and more ambitious ways to improve your game and module there may well come a time when your traits will
    seem to be interacting oddly with each other. Perhaps the trait you expected to be hidden by the Mask trait you
    just added isn't disappearing? Or parts of the piece you set up to be rotatable aren't rotating? Or parts that you 
    set up <i>not</i> to rotate <i>are</i> rotating? Or maybe the Trigger Actions you are sending aren't being resolved
    in the order you expected they would?<br>
    <br>
    Well it turns out that the interactions between different traits within the same piece are substantially affected by
    the <i>order</i> those traits appear in the Game Piece's trait list! This section will walk you through the relationships
    between traits, provide you with some basic "rules of thumb" for ordering your traits, and then end with a comprehensive
    trait ordering guide that should be a regular touchstone even when you've become a VASSAL master!<br>
    <br>

    <h3>Draw Order and Traits</h3>
    <table border="0" cellpadding="2" cellspacing="2" width="100%">
      <tbody>
      <tr>
      <td valign="top">
      <i>Most</i> traits which draw something are drawn starting from the Basic Piece and proceeding downwards, meaning
      that the last Layer (or Text Label, etc) in the list will be drawn overtop everything else. However there are two
      exceptions: Area of Effect traits, and any Layer with the <i>Underneath when highlighted?</i> option when the
      piece is currently selected. In both of these cases, the "exception" traits (Area-of-Effect or Draw-Underneath)
      are drawn
      <i>before</i> the Basic Piece. If more than one of these exceptions exists in a single piece, then the first to
      draw will be the <i>lowest</i> trait in the list, then the next lowest, etc -- the opposite of the normal order,
      and all before the Basic Piece.<br>
      <br>
      The chart at right illustrates the draw order for a sample set of piece traits. The two exception traits are drawn
      first (in bottom up order), followed by everything else (in top down order). Changing the order of the traits in
      this piece would change the order in which they were drawn. For example if the <i>Text Label</i> trait were moved
      up to the position directly underneath the Basic Piece, then it would be drawn right after the Basic Piece.
      </td>
      <td valign="top">
      <img src="images/GamePieceDrawOrder.png" alt=""><br>
      </td>
      </tr>
      </tbody>
    </table>

    <br>
    <h3>Traits That Control Other Traits</h3>
    <table border="0" cellpadding="2" cellspacing="2" width="100%">
      <tr>
      <td valign="top">
      Some traits, such as <i>Can Rotate</i>, <i>Mask</i>, and <i>Restrict Commands</i> are designed to directly control
      and affect other traits (without the use of Key Commands). These traits will <i>only</i> affect traits which
      appear <i>above</i>
      them in the list of traits after taking prototypes into account. Conversely each trait can only be
      affected/controlled/modified by traits which appear <i>below</i> them in the list of traits. You must think about
      each trait, how it affects the Game Piece, and whether it should affect, or be affected by other traits of the
      Game Piece. The chart at right provides some general guidance for an ordering that will frequently be the best,
      but it is not exhaustive -- there will be special cases where you will want to deviate from it.<br>
      <br>
      <b>Example 1:</b> if you want a <i>Text Label</i> to Rotate, then the <i>Text Label</i> trait must be above the 
      <i>Can Rotate</i> trait. If you <i>don't</i> want your Text Labels to rotate, then they must be <i>below</i> the
      <i>Can Rotate</i> trait. <br>
      <br>
      <b>Example 2:</b> if you want the most of the visible information on your card or piece to be hidden from other
      players when the card is "flipped over" to its back side by a <i>Mask</i> trait, then all of its Layers (and any
      Text Labels, plus any traits that create Menu options and/or Key Commands that you don't want to be available to
      other players while the card is hidden) need to be
      <i>above</i> the <i>Mask</i> trait. But if there's some particular graphic Layer or Text Label that you want to be
      drawn even when the card is flipped over, then you'd put those traits <i>below</i> the <i>Mask</i> trait. <br>
      <br>
      <b>Example 3:</b> <i>Restrict Commands</i> traits should almost always go at the very bottom of the list of
      traits, so that they will be able to hide/disable the traits that they specify.<br>

      </td>
      <td valign="top">
      <img src="images/GamePieceTraitOrder.png"><br>
      </td>
      

      </tr>
    </table>

    <br>
    <h3>Key Commands and Traits</h3>
    <table border="0" cellpadding="2" cellspacing="2" width="100%">
      <tbody>
      <tr>
      <td valign="top">

      When a Key Command (or Named Key Command) is received by a Game Piece, the Traits are visited in a particular
      order to see if they listen for that Key Command, and if they do have an entry for that Key Command the
      appropriate part of the Trait activates. When a Key Command arrives at a Game Piece, its behaviour is identical
      regardless of the "origin" of that Key Command. The Key Command could have come from the player pressing a real
      keyboard shortcut, from the player selecting the corresponding right-click context menu command, from a Global Key
      Command arriving from a completely different Game Piece or from the Toolbar, from an Action Button, or from a
      Trigger Action trait within the piece.<br>
      <br>
      The order Traits <i>within</i> the piece are visited is as follows:
      <ol>
        <li>First any traits <i>except for</i> Trigger Action and Report Action traits are visited. This happens
          starting at the bottom of the list and proceeding up toward the Basic Piece trait.</li>
        <li>Then, once every trait that isn't a Trigger Action or Report Action trait has been visited, we then visit
          those traits, this time starting at the <i>top</i> of the list just beneath the Basic Piece trait and
          proceeding towards the bottom.</li>
      </ol>
      </td>
      <td valign="top">
      <img src="images/GamePieceOrder.png" alt=""><br>
      </td>
      </tr>
      </tbody>
    </table>
    <br>
    <br>
		<table border="1" style="text-align:center; align:center; font-family:Arial; line-height:120%" cellpadding="6">    
      <tr>
      <th colspan="2">
         <h2>Advanced Trait Ordering</h2>
      </th>
      </tr>
      <tr>
        <th>Traits<br><br>
        (in recommended order they should normally
        appear in a piece)</th>
        <th>Ordering Notes</th>
      </tr>
      <tr bgcolor="#c1c1c1">
        <td style="line-height:150%; font-weight:bold;">
        Basic&nbsp;Piece</td>        
        <td>(Basic Piece will always be at the top)</td>
      </tr>
      <tr bgcolor="#c1c1ff" style="">
        <td style="line-height:150%; font-weight:bold;">
          Layer&nbsp;<i>(Rotatable)</i><br>
          Text&nbsp;Label&nbsp;<i>(Rotatable)</i></td>
        <td>Drawing Layers that will rotate should be <i>above</i> the Can Rotate and/or Can Pivot.</td>
      </tr>
      <tr bgcolor="#9999ff">
        <td style="line-height:150%; font-weight:bold;">
          Can&nbsp;Rotate<br>
          Can&nbsp;Pivot</td>
        <td>Can Rotate belongs below any drawing trait that it should rotate, but <i>above</i> any Can Pivot trait.</td>
      </tr>
      <tr bgcolor="#c1c1ff">
        <td style="line-height:150%; font-weight:bold;">
          Movement&nbsp;Trail<br>
          Layer<br>
          Mark&nbsp;When&nbsp;Moved<br>
          Text&nbsp;Label<br>
          Area&nbsp;of&nbsp;Effect<br>
        <td>These drawing traits all belong <i>above</i> Non-Rectangular, and <i>above</i> Masking/Restricting Traits (see red box below). Optionally they could also move <i>above</i> Can Rotate if you want them to rotate/pivot; in this position they will <i>not</i> rotate or pivot. Traits
        will draw in order from the Basic Piece on down, meaning the very last drawing trait in the list will be "drawn on top of" everything else, and so forth.</td>
      </tr>
      <tr bgcolor="#a86eff">
        <td style="line-height:150%; font-weight:bold;">
          Non-Rectangular</td>
        <td>Non-Rectangular belongs <i>below</i> all drawable traits - otherwise their bounding box regions will be selectable even if transparent.</td>
      </tr>
      <tr bgcolor="#ffcccc">
        <td style="line-height:150%; font-weight:bold;">
          Delete<br>
          Replace&nbsp;With&nbsp;Other</td>
        <td><br>These delete the piece & stop any further processing. Keep them <i>above</i> anything that needs doing first. <b>NOTE:</b> Be aware that any Trigger Action
        on the same Key Command as a deleting trait will never get to execute -- you will need to use a forking/chaining Trigger Action sequence
        to be sure any Trigger Action traits you need to have run before a deleting trait are executed.<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#c6e0b4">
        <td style="line-height:150%; font-weight:bold;">
        Send&nbsp;to&nbsp;Location<br>
        Move&nbsp;Fixed&nbsp;Distance<br>
        Return&nbsp;to&nbsp;Deck<br>
        Place&nbsp;Marker<br>
        Clone
        </td>
        <td>
        Movement and Piece-Placement traits normally belong <i>above</i> any Masking/Restricting traits (i.e. Mask, Invisible, Restrict Access, Restrict Commands).
        </td>
      </tr>
      <tr bgcolor="#ffff00">
        <td style="line-height:150%; font-weight:bold;">
        Play&nbsp;Sound<br>
        Action&nbsp;Button<br>
        Global&nbsp;Hotkey<br>
        Global&nbsp;Key&nbsp;Command
        </td>
        <td>
        "Communication" and Key Command initiating traits normally belong <i>above</i> Masking/Restricting traits (i.e. Mask, Invisible, Restrict Access, Restrict Commands).
        </td>
      </tr>
      <tr bgcolor="#ffc000">
        <td style="line-height:150%; font-weight:bold;">
        <br>
        Trigger&nbsp;Action<br>
        <br>
        </td>
        <td>
        <br>
        Trigger Action traits should normally be grouped <i>above</i> Report Action traits so that any changes to properties they trigger are resolved before the Report Action reports on them. (They should also normally appear <i>above</i> any Mask & Restrict Commands).<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#7db955">
        <td style="line-height:150%; font-weight:bold;">
        <br>
        Report&nbsp;Action<br>
        <br>
        </td>
        <td>
        <br>
        Report Action traits should be grouped <i>below</i> Trigger Action traits (so that they report results after the Triggers process).<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#bdd7ee">
        <td style="line-height:150%; font-weight:bold;">
        Set&nbsp;Global&nbsp;Property<br>
        Spreadsheet<br>
        Property&nbsp;Sheet<br>
        Dynamic&nbsp;Property
        </td>
        <td>
        <br>
        Property traits can have their values read faster (so that Vassal runs slightly faster) the <i>lower</i> they are in the trait list. However you'll normally want the "setter" actions of e.g. Dynamic Properties and Set Global Property to remain <i>above</i> any Mask, Invisible, Restrict Access, and Restrict Commands traits that could affect them.<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#ff7070">
        <td style="line-height:150%; font-weight:bold;">
        Mask<br>
        Invisible<br>
        Restrict&nbsp;Access<br>
        Restrict&nbsp;Commands
        </td>
        <td>
        <br>
        Masking/Restricting traits belong <b><i>below</i></b> any traits that they need to be able to hide and protect. Mask belongs <b><i>above</i></b> Invisible.<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#2f75b5">
        <td style="line-height:150%; font-weight:bold;">
        <br>
        Does&nbsp;not&nbsp;stack<br>
        <br>
        </td>
        <td>
        <br>
        Does Not Stack functions correctly anywhere in the trait list but <i>runs slightly faster near the bottom.</i><br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#00b0f0">
        <td style="line-height:150%; font-weight:bold;">
        Calculated&nbsp;Property<br>
        Marker<br>
        </td>
        <td>
        <br>
        Calculated Property and Marker function properly anywhere, but they <i>run slightly faster near the bottom</i>.<br>
        <br>
        </td>
      </tr>
      <tr>
        <th colspan="2">
          <h3>Free Floating Traits</h3>
        </th>
      </tr>
      <tr bgcolor="#c1c1c1">
        <td style="line-height:150%; font-weight:bold;">
        <br>
        Prototype<br>
        <br>
        </td>
        <td>
        <br>
        The proper location for a Prototype... <b><i>depends</i></b> on what's in the Prototype! Note that you may sometimes decide
        that you need to split up large/complex Prototypes so that "the part that needs to go on top can go on top" and "the part that
        needs to go down below can go down below".<br>
        <br>
        </td>
      </tr>
      <tr bgcolor="#e0e0e0">
        <td style="line-height:150%; font-weight:bold;">
        <br>
        Sub-Menu<br>
        Menu&nbsp;Separator<br>
        <br>
        </td>
        <td>
        <br>
        Menu-building traits should go wherever you need them for building the right kinds of right-click context menus. Note, however,
        that Sub-Menu traits must always go <b><i>below</i></b> the traits that it should be grouping into a menu.<br>
        <br>
        </td>
      </tr>
    </table>
    </td>
    </tr>
    </tbody>
  </table>

  <hr size="2" width="100%">
  <h2>List of Piece Traits</h2>
  <h3><a href="BasicPiece.htm">Basic Piece</a></h3>
  Every Game Piece contains a Basic Piece, which itself contains a Name string and can also be assigned an image. For a
  truly simple piece this is all that is necessary. However for pieces that need more complex images or combinations of
  them, the image from the Basic Piece element can be omitted in favor of ones from e.g. Layer traits.<br>
  <h3>Delete<a name="Delete"></a><br>
  </h3>
  <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">
    <tbody>
    <tr>
    <td style="vertical-align: top;">The ability to be deleted by players during a game.&nbsp; Specify text for the
    optional right-click context menu item, if desired, and a <a href="NamedKeyCommand.htm">Key Command or Named Key
    Command</a> that will cause the piece to be deleted.<br>
    </td>
    <td style="vertical-align: top;"><img src="images/Delete.png" title="" alt=""></td>
    </tr>
    </tbody>
  </table>
  <br>
  <h3>Clone<a name="Clone"></a></h3>
  <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">
    <tbody>
    <tr>
    <td style="vertical-align: top;">The ability to be duplicated by players during a game.&nbsp; Specify text for the
    optional right-click context menu item, if desired, and a <a href="NamedKeyCommand.htm">Key Command or Named Key
    Command</a> that will cause the piece to be duplicated.<br>
    </td>
    <td style="vertical-align: top;"><img src="images/Clone.png" title="" alt=""></td>
    </tr>
    </tbody>
  </table>
  <h3><a href="Layer.htm">Layer</a></h3>
  A set of images along with Key Commands and/or Expressions to switch between them. <br>
  <h3><a href="UsePrototype.htm">Prototype</a></h3>
  Inserts a pre-defined set of Traits defined in a <a href="Prototypes.htm#Definition">Prototype</a> elsewhere. This
  allows you to define a set of Traits for a whole class of Pieces all in one place; likewise, by changing the Prototype
  later your changes will automatically apply to every piece which inherits the Prototype.<br>
  <h3><a href="Label.htm">Label</a></h3>
  A plain text label drawn somewhere on the Piece. Font sizes, colors, and position can be customized, and the text of
  the message can be created indirectly using the contents of Properties.<br>
  <h3><a href="Hideable.htm">Invisible</a></h3>
  The ability to be hidden to non-owning players.<br>
  <h3><a href="Mask.htm">Mask</a></h3>
  The ability to show only limited information to non-owning players. The most common application is to give playing
  cards a generic "back side" which obscures the face of the card from players who aren't currently entitled to see it.
  <h3><a href="SendToLocation.htm">Send to Location</a></h3>
  Defines a command that sends a piece to a specified location.<br>
  <br>
  <h3><a href="GlobalKeyCommand.htm">Global Key Command</a></h3>
  Applies a command to other pieces.<br>
  <h3><a href="Translate.htm">Move Fixed Distance<br>
  </a></h3>
  Defines a command to move a piece a fixed distance in a direction<br>
  <h3><a href="ReturnToDeck.htm">Return to Deck</a></h3>
  Defines a command that sends a piece to a <a href="Deck.htm">Deck</a>.
  <h3><a href="NonStacking.htm">Does Not Stack</a></h3>
  Prevents the piece from combining with other pieces in a stack, and can also be used to control whether the piece can
  be moved, selected, and/or band-selected by a player.<br>
  <h3><a href="PropertySheet.htm">Property Sheet</a></h3>
  Provides a popup window from which players may set and view auxiliary information about a piece.&nbsp; Includes
  sophisticated controls for specifying single- and multi-line text notes and tick-mark boxes for depletable resources
  (hit points, shield levels, damage, etc.)<br>
  <br>
  <h3><a href="Spreadsheet.htm">Spreadsheet</a></h3>
  Attaches an editable informational table to a piece.&nbsp; Unlike a Property Sheet, it contains only plain-text
  fields, but can contain arbitrary numbers of rows and columns.<br>
  <h3><a href="Marker.htm">Place Marker</a></h3>
  Defines a keyboard command that places another piece on top of this piece.<br>
  <br>
  <h3><a href="Replace.htm">Replace with Other<br>
  </a></h3>
  Defines a keyboard command that replaces this piece with a different piece.
  <h3><a href="Rotate.htm">Can Rotate</a></h3>
  Defines the ability to rotate through a specified number of facings.<br>
  <h3><a href="Pivot.htm">Can Pivot</a></h3>
  Defines the ability to pivot a piece, i.e. rotate around a point other than the center.<br>
  <h3><a href="NonRectangular.htm">Non-Rectangular</a></h3>
  Allows pieces with unconventional shapes to use their actual image boundaries for selection and dragging. In other
  technical terms, directs the Piece to ignore transparent areas of their image for purposes of selecting the Piece with
  the mouse.<br>
  <h3><a href="PlaySound.htm">Play Sound<br>
  </a></h3>
  Adds a command that plays a specified sound when invoked.<br>
  <h3><a href="MarkMoved.htm">Mark When Moved</a></h3>
  Allows the piece to be automatically marked when moved in a Map Window.<br>
  <br>
  <h3><a href="MovementTrail.htm">Movement Trail<br>
  </a></h3>
  Draws the recent movement path of the piece as a trail of points.<br>
  <h3><a href="AreaOfEffect.htm">Area Of Effect</a><br>
  </h3>
  Highlights a specified radius around a piece.<br>
  <h3><a href="SubMenu.htm">Sub-Menu</a></h3>

  Creates a sub-menu in the right-click drop-down menu.<br>

  <h3><a href="MenuSeparator.htm">Menu Separator</a></h3>

  Creates a menu separator (horizontal bar) in the right-click drop-down menu.<br>


  <h3><a href="RestrictCommands.htm">Restrict Commands</a></h3>
  Hides or removes keyboard/menu commands when certain conditions apply.<br>
  <h3><a href="RestrictedAccess.htm">Restricted Access</a></h3>
  Limits control of a Piece by non-owning players.<br>
  <h3><a href="ReportChanges.htm">Report Action<br>
  </a></h3>
  Allows the Piece to automatically report messages, state changes, and other game information to the chat log window.
  <h3><a href="TriggerAction.htm">Trigger Action<br>
  </a></h3>
  Allows Pieces to trigger Key Commands and Named Key Commands. Triggers can be used to combine multiple commands into a
  single menu entry, place conditions on a command's execution, create repeating loops, and more.<br>
  <h3><a href="GlobalHotKey.htm">Global Hotkey<br>
  </a></h3>
  Allows Pieces to trigger Toolbar&nbsp;buttons and actions, via the Hotkey associated with the button on the Toolbar.
  <br>
  <h3><a href="ActionButton.htm">Action Button<br>
  </a></h3>
  Allows a region of a Piece to be specified to act like a button, invoking a command when a player clicks within the
  region with the mouse.
  <h3><a href="PropertyMarker.htm">Marker</a><br>
  </h3>
  Assigns a fixed value to a named property on a piece.<br>
  <h3><a href="DynamicProperty.htm">Dynamic Property</a><br>
  </h3>
  Assigns a user-changeable value to a named property on a piece.<br>
  <h3><a href="SetGlobalProperty.htm">Set Global Property</a><br>
  </h3>
  Defines commands to change the value of a <a href="GlobalProperties.htm">Global Property</a>.<br>
  <br>
  <br>


  </tr>
  <tr>
  </tr>
  </tbody>
</table>
<br>
<br>
</body>
</html>
